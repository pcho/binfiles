#!/usr/bin/env bash

GH_VERSION="2.14.2"
TL_VERSION="4.3.1"
EGG_VERSION="1.9.2"
GO_VERSION="1.18.4"

help() {
  cat << EOT

  System Setup Script
  Usage: $(basename "$0") [option]

  Options:
    clean:      Configure clean VPS
    mini:       Configure minimal VPS
    post:       Install shftm & pnpm

    vim:        Build VIM
    tmux:       Build TMUX

    go:         Install Go
    gh:         Install GitHub CLI
    cloud:      Install Cloud Torrent
    pnpm:       Install pnpm
    tl:         Install The Lounge
    egg:        Install eggdrop

    key:        Show host key

    fzf:        Update fzf
    caddy:      Update Caddyfile

EOT
}

# Configure clean VPS
configuration() {
  echo "Enter hostname:"
  read -r HNAME
  echo "Enter Username:"
  read -r UNAME
  echo "Enter IPv4 Address:"
  read -r IPV4
  echo "Enter IPv6 Address:"
  read -r IPV6
  echo "✔ Done"

  # Add password to default user
  sudo passwd "$UNAME"

  # Link dotfiles
  ln -sfv "$HOME/.dotfiles/.vim" ~
  ln -sfv "$HOME/.dotfiles/.bin" ~
  ln -sfv "$HOME/.dotfiles/.zshenv" ~
  ln -sfv "$HOME/.dotfiles/.curlrc" ~
  ln -sfv "$HOME/.dotfiles/.tmux.conf" ~
  ln -sfv "$HOME/.dotfiles/.gitconfig" ~
  ln -sfv "$HOME/.dotfiles/.dircolors" ~

  # Make some dirs
  mkdir "$HOME/.vim/undo"
  mkdir "$HOME/.dev"

  # Copy SSH settings
  cp "$HOME/.dotfiles/.config/config" "$HOME/.ssh/"

  # Update all packages and install essentials
  sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get install -y \
    apt-transport-https \
    silversearcher-ag \
    protobuf-compiler \
    build-essential \
    python3-venv \
    libevent-dev \
    python3-pip \
    ncurses-dev \
    pkg-config \
    shellcheck \
    libssl-dev \
    autoconf \
    autogen \
    fd-find \
    libtool \
    cmake \
    whois \
    unzip \
    bison \
    ncdu \
    htop \
    zsh \
    git

  # Change default shell to ZSH for user and root
  chsh -s /usr/bin/zsh
  sudo chsh -s /usr/bin/zsh

  # Sets Timezone to EU/Berlin
  export TZ='Europe/Berlin'
  sudo ln -snf /usr/share/zoneinfo/"$TZ" /etc/localtime && sudo dpkg-reconfigure -f noninteractive tzdata

  # Create host key
  cd "$HOME" || return
  ssh-keygen -t rsa \
    -b 4096 \
    -f ssh_host_key \
    -C '' \
    -N ''

  # Configure SSH
  sudo mv "$HOME/ssh_host_key" "$HOME/ssh_host_key.pub" /etc/ssh/
  sudo chown root:root /etc/ssh/ssh_host_key /etc/ssh/ssh_host_key.pub
  sudo chmod 0600 /etc/ssh/ssh_host_key
  sudo cp "$HOME/.dotfiles/.config/sshd_config" /etc/ssh/
  sudo sed -in '0,/ubuntu/s//'"$UNAME"'/' /etc/ssh/sshd_config
  sudo service ssh restart

  # Open ports
  sudo ufw allow ssh
  sudo ufw allow http
  sudo ufw allow https
  sudo ufw allow 60000:60005/udp
  sudo ufw enable

  # Generate dhparam cert
  screen -d -m sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096

  # Set hostname
  sudo hostnamectl set-hostname "$HNAME"

  # Add IP Addresses to /etc/hosts
  sudo sed -i '1 a '"$IPV4"' '"$HNAME"'' /etc/hosts
  sudo sed -i '2 a '"$IPV6"' '"$HNAME"'' /etc/hosts
}

# Show host key
show_key() {
  ssh-keygen -E sha256 -lf /etc/ssh/ssh_host_key.pub
}

# Build mosh from source
build_mosh() {
  git clone --depth=1 https://github.com/mobile-shell/mosh "$HOME/mosh"
  cd "$HOME/mosh" || return
  sh autogen.sh
  ./configure
  make
  sudo make install
  cd "$HOME" || exit
  rm -rfv "$HOME/mosh"
}

# Build TMUX
build_tmux() {
  git clone --depth=1 https://github.com/tmux/tmux.git "$HOME/tmux"
  cd "$HOME/tmux" || return
  sh autogen.sh
  ./configure
  make
  sudo make install
  cd ..
  rm -rfv "$HOME/tmux"

}

# Build tmux-mem-cpu-load plugin
build_tmcl() {
  git clone --depth=1 https://github.com/thewtex/tmux-mem-cpu-load "$HOME/tmcl"
  cd "$HOME/tmcl" || return
  cmake .
  make
  sudo make install
  cd ..
  rm -rfv "$HOME/tmcl"
}

# Build VIM
build_vim() {
  git clone --depth=1 https://github.com/vim/vim.git "$HOME/vim"
  cd "$HOME/vim" || return
  ./configure \
    --with-features=huge
  make
  sudo make install
  cd && sudo rm -rfv "$HOME/vim"
}

# Build eggdrop
build_egg() {
  EGG="$HOME/eggdrop-$EGG_VERSION"

  wget https://github.com/eggheads/eggdrop/releases/download/v"$EGG_VERSION"/eggdrop-"$EGG_VERSION".tar.gz -P "$HOME"

  tar -C "$HOME" -zxvf "$EGG".tar.gz

  sudo apt update && sudo apt install -y tcl \
    tcl-dev \
    tcl-trf \
    tcl-tls \
    libsqlite3-tcl \
    tcllib

  cd "$EGG" || return
  ./configure
  make config
  make
  make install
  make sslcert
  cd && rm -rfv "$EGG"
}

# Install fzf
install_fzf() {
  git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf"
  "$HOME/.fzf/install"
}

# Update fzf
update_fzf() {
  if [[ -d "$HOME/.fzf" ]]; then
    cd "$HOME/.fzf" || return
    if [ "$(git status --porcelain | wc -l)" -gt 0 ]; then
      git pull && ./install
    else
      echo "✔ You have the newest fzf version"
    fi
  fi
}

# Install Caddy
install_caddy() {
  sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
  curl -1sLf 'https://dl.cloudsmith.io/public/caddy/testing/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-testing-archive-keyring.gpg
  curl -1sLf 'https://dl.cloudsmith.io/public/caddy/testing/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-testing.list
  sudo apt-get update && sudo apt-get install -y caddy
}

# Update Caddyfile
update_caddyfile() {
  cat << EOT | sudo tee /etc/caddy/Caddyfile
$HNAME {
    reverse_proxy 0.0.0.0:3030
        log {
            output file /var/log/caddy/access.log
        }
}

cloud.$HNAME {
    reverse_proxy 0.0.0.0:3000
        log {
            output file /var/log/caddy/cloud.log
        }
}
EOT
}

# Install Docker
install_docker() {
  sudo mkdir -p /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt-get update && sudo apt-get install -y \
    docker-ce \
    docker-ce-cli \
    containerd.io
}

# Install Node
install_node() {
  curl -fsSL https://deb.nodesource.com/setup_current.x | sudo -E bash -
  sudo apt-get update && sudo apt-get install -y nodejs
}

# Install pnpm
install_pnpm() {
  curl -fsSL https://get.pnpm.io/install.sh | sh -
}

# Install Go
install_go() {
  wget https://golang.org/dl/go"$GO_VERSION".linux-amd64.tar.gz -P "$HOME"
  sudo tar -C /usr/local -xzf "$HOME"/go"$GO_VERSION".linux-amd64.tar.gz
  sudo rm -rfv "$HOME"/go"$GO_VERSION".linux-amd64.tar.gz
}

# Install Cloud Torrent
install_cloud() {
  sudo docker run --name torrent -d -p 3000:3000 -v /home/ubuntu/.downloads:/downloads jpillora/cloud-torrent
}

# Install The Lounge
install_tl() {
  sudo docker run --detach --name thelounge --publish 113:9001 --publish 9000:9000 --volume ~/.thelounge:/var/opt/thelounge --restart always thelounge/thelounge:"$TL_VERSION"
}

# Install shfmt
install_shfmt() {
  go install mvdan.cc/sh/v3/cmd/shfmt@latest
}

# Install GitHub CLI
install_gh() {
  wget https://github.com/cli/cli/releases/download/v"$GH_VERSION"/gh_"$GH_VERSION"_linux_amd64.deb -P "$HOME"
  sudo dpkg -i "$HOME"/gh_"$GH_VERSION"_linux_amd64.deb
  rm -rfv "$HOME"/gh_"$GH_VERSION"_linux_amd64.deb
  gh auth login
}

clean_install() {
  configuration
  build_mosh
  build_tmux
  build_tmcl
  build_vim
  install_fzf
  install_go
  install_caddy
  update_caddyfile
  install_docker
  install_node
  show_key
}

clean_minimal() {
  configuration
  build_tmux
  build_tmcl
  build_vim
  install_fzf
  show_key
}

post_install() {
  # Cleanup bash files
  rm -rf "$HOME/.bashrc"
  rm -rf "$HOME/.bash_history"
  rm -rf "$HOME/.bash_logout"
  rm -rf "$HOME/.profile"

  # Install shfmt and pnpm
  install_shfmt
  install_pnpm
}

case $1 in
  "clean")
    clean_install
    ;;
  "mini")
    clean_minimal
    ;;
  "post")
    post_install
    ;;
  "vim")
    build_vim
    ;;
  "tmux")
    build_tmux
    ;;
  "go")
    install_go
    ;;
  "cloud")
    install_cloud
    ;;
  "pnpm")
    install_pnpm
    ;;
  "tl")
    install_tl
    ;;
  "gh")
    install_gh
    ;;
  "egg")
    build_egg
    ;;
  "key")
    show_key
    ;;
  "fzf")
    update_fzf
    ;;
  "caddy")
    update_caddyfile
    ;;
  *)
    help
    ;;
esac
